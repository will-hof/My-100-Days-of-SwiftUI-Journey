//Day 8

import SwiftUI

enum PasswordError: Error {
    case short, obvious
}
func checkPassword(_ password: String) throws -> String {
    if password.count < 5 {throw PasswordError.short} 
    if password == "12345" {throw PasswordError.obvious}
    if password.count < 8 {
        return "OK" 
    } else if password.count < 10 {
        return "Good"
    } else {
        return "Excellent"
    }
}
    
let string = "12345"
do {
    let result = try checkPassword(string)
    print("Password rating: \(result)") 
} catch {
    print("There was an error...")
}

//day 10



import SwiftUI

struct Album {
    let title: String
    let artist: String
    let year: Int
    
    func printSummary() {
        print("\(title) (\(year)) by \(artist)")
    }
}
let red = Album(title: "Red", artist: "Taylor", year: 2012)
let wings = Album(title: "Wings", artist: "BTS", year: 2016)

print(red.title)
print(wings.artist)

red.printSummary()
wings.printSummary()

struct Employee {
    let name: String
    var vacationRemaining: Int
    
    mutating func takeVacation(days: Int) {
        if vacationRemaining > days {
            vacationRemaining -= days
            print("I am going on vacation!")
            print("Days remaining: \(vacationRemaining)")
            
        } else {
            print("Oops not enough vacation days left for that request.")
        }
        
    }
}

var archer = Employee(name: "Sterling Archer", vacationRemaining: 14)
archer.takeVacation(days: 5)
print(archer.vacationRemaining)

struct Phone {
    var manufacturer: String
    var screenSize: Double
}
struct LeviJeans {
    var fitNumber: Int
    var waist: Int
    var leg: Int
}

struct Wine {
    var age: Int
    var isVintage: Bool
    var price: Int {
        if isVintage{
            return age + 20
        } else {
            return age + 5
        }
    }
}
let malbec = Wine(age: 2, isVintage: true)
print(malbec.price)

struct Investor {
    var age: Int
    var investmentPlan: String {
        if age < 30 {
            return "Shares"
        } else if age < 60 {
            return "Equitiest"
        } else {
            return "Bonds"
        }
    }
}
let investor = Investor(age: 38)
print(investor.investmentPlan)

struct Game {
    var score = 0 {
        didSet {
            print("Score is now \(score)")
        }
    }
}
var game = Game()
game.score += 10
game.score += 3
game.score += 1

struct App {
    var contacts = [String]() {
        willSet {
            print("Current value is: \(contacts)")
            print("New value will be: \(newValue)")
        }
        didSet {
            print("There are now \(contacts.count) contacts")
            print("Old value was: \(oldValue)")
        }
    }
}
var app = App()
app.contacts.append("Adrian E")
app.contacts.append("Allen W")
app.contacts.append("Ish S")

struct BankAccount {
    var name: String
    var isMillionnaire = false
    var balance: Int {
        didSet {
            if balance > 1_000_000 {
                isMillionnaire = true
            } else {
                isMillionnaire = false
            }
        }
    }
}

struct Person {
    var clothes: String {
        didSet {
            print("I'm changing to \(clothes)")
        }
    }
}
// day 11

import SwiftUI

struct BankAccount {
    private(set) var funds = 0 
    
    mutating func deposit(amount: Int) {
        funds += amount
    }
    mutating func withdraw(amount: Int) -> Bool {
        if funds > amount {
            funds -= amount
            return true
        } else {
            return false
        }
    }
}

var account = BankAccount()
account.deposit(amount: 100)


struct School {
    static var studentCount = 0
    static func add(student: String) {
        print("\(student) joined the school.")
        studentCount += 1
    }
}

School.add(student: "Taylor Swift")
print(School.studentCount)

struct AppData {
    static let version = "1.3 beta 2"
    static let saveFilename = "settings.json"
    static let homeURL = "https://www.hackingwithswift.com"
}

struct Employee{
    let username: String
    let password: String
    
    static let example = Employee(username: "cfederighi", password: "h4irf0rce0ne")
}


// day 12


import SwiftUI

class Game {
    var score = 0 {
        didSet {
            print("Score is now \(score)")
        }
    }
}
var newGame = Game()
newGame.score += 10

class Employee {
    let hours: Int
    init(hours: Int) {
        self.hours = hours 
    }
}
class Developer: Employee {
    func work() {
        print("I'm writing code for \(hours) hours")
    }
}

class Manager: Employee {
    func work() {
        print("I'm going to meetings for \(hours) hours.")
    }
}

let robert = Developer(hours: 8)
let joseph = Manager(hours: 10)
robert.work()
joseph.work()

//class User {
//var username = "Anonynmous"
    
//func copy() -> User {
//let user = User()
//user.username = username
//return user
    //}
    //}

//var user1 = User()
//var user2 = user1.copy()
//user2.username = "Taylor"

//print(user1.username)
//print(user2.username)

//class User {
//let id: Int
    
//init(id: Int) {
//self.id = id
//print("user \(id): I'm alive!")
    //}
//deinit {
//print("User \(id): I'm dead!")
    //}
    //}
    
//var users = [User]()

//for i in 1...3 {
//let user = User(id: i)
//print("User \(user.id): I'm in control!")
//users.append(user)
    //}

//print("Loop is finished!")
//users.removeAll()
//print("Array is clear!")

class User {
    var name = "Paul"
}

var user = User()
user.name = "Taylor"
user = User()
print(user.name)

// day 13
import SwiftUI
import UIKit
protocol View {}

func getRandomNumber() -> some Equatable {
    Int.random(in: 1...6)
}
func getRandomBool() -> some Equatable {
    Bool.random()
}

print(getRandomNumber() == getRandomNumber())

extension String {
    func trimmed() -> String {
        self.trimmingCharacters(in: .whitespacesAndNewlines)
    }
    mutating func trim() {
        self = self.trimmed()
    }
    var lines: [String] {
        self.components(separatedBy: .newlines)
    }
}
var quote = "   The truth is rarely pur and never simple    "
let trimmed = quote.trimmingCharacters(in: .whitespacesAndNewlines)

quote.trim()


let lyrics = """
    But I keep cruising
    Can't stop, won't stop moving
    It's like I got this music in my mind
    Saying it's gonna be alright
    """
print(lyrics.lines.count)

struct Book {
    let title: String
    let pageCount: Int
    let readingHours: Int
}
let lotr = Book(title: "Lord of the Rings", pageCount: 1178, readingHours: 24)

extension Array {
    var isNotEmpty: Bool {
        isEmpty == false
    }
}

let guests = [ "Mario", "Luigi", "Peach"]

if guests.isNotEmpty {
    print("Guest count: \(guests.count)")
}

protocol Person {
    var name: String {get}
    func sayHello()
}
extension Person {
    func sayHello() {
        print("Hi I'm \(name)")
    }
}
struct Employee: Person {
    let name: String
}
let taylor = Employee(name: "Tayylor Swift")
taylor.sayHello()

