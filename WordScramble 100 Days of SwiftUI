//Hacking with Swift, 100 Days of SwiftUI 
//WordScramble Day 29-31

import SwiftUI

struct ContentView: View {
    @State private var usedWords = [String]()
    @State private var rootWord = "silkworm"
    @State private var newWord = ""
    @State private var playerScore = 0
    
    @State private var errorTitle = ""
    @State private var errorMessage = ""
    @State private var showingError = false
    //@State private var isShort = false
    
    //yet to import wordlist to ipad playground
    //let startWords = Wordlist
    
    var body: some View {
        NavigationView {
            List {
                Section {
                    TextField("Enter your word", text: $newWord)   
                    .autocapitalization(.none)
                }
                Section {
                    ForEach(usedWords, id: \.self) { word in
                        HStack {
                            Image(systemName: "\(word.count).circle")
                            Text(word)
                        }
                    }
                }
            }
            .navigationTitle(rootWord)
            .onSubmit(addNewWord) 
            .onAppear(perform: startGame)
            .alert(errorTitle, isPresented: $showingError) {
                Button("OK", role: .cancel) {}
            } message: {
                Text(errorMessage)
            }
            .toolbar {
                Button("New Game", action: startGame)
            }
            .safeAreaInset(edge: .bottom) {
                Text("Score: \(playerScore)")
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(.blue)
                    .foregroundColor(.white)
                    .font(.title)
            }
        }
    }
    func addNewWord() {
        let answer = newWord.lowercased().trimmingCharacters(in: .whitespacesAndNewlines)
        guard answer.count > 2 else { 
            wordError(title: "Word too short", message: "words must be at least three letters long")
            return 
        }
        guard answer != rootWord else { 
            wordError(title: "Nice try...", message: "You can't use the starting word")
            return 
        }
        
        guard isOriginal(word: answer) else {
            wordError(title: "Word used alread", message: "You can think of another")
            return
        }
        guard isPossible(word: answer) else {
            wordError(title: "Word not possible", message: "You can't spell that word from '\(rootWord)'!")
            return
        }
        guard isReal(word: answer) else {
            wordError(title: "Word not recognized", message: "You can't just make them up, you know!")
            return
        }
        withAnimation {
            usedWords.insert(answer, at: 0)
        }
        newWord = ""
        playerScore += answer.count
    }
    func startGame() {
        //newWord = ""
        usedWords.removeAll()
        playerScore = 0
        
        //if let startWordsURL = Bundle.main.url(forResource: "start", withExtension: "txt") {
        //if let startWords = try? String(contentsOf: startWordsURL){
        //let allWords = startWords.components(separatedBy: "\n")
        //rootWord = allWords.randomElement() ?? "silkworm"
        //return
    }
    func isOriginal(word: String) -> Bool {
        !usedWords.contains(word)
    }
    func isPossible(word: String) -> Bool {
        var tempWord = rootWord
        for letter in word {
            if let pos = tempWord.firstIndex(of: letter) {
                tempWord.remove(at: pos)
            }else {
                return false
            }
        }
        return true
    }
    func isReal(word: String) -> Bool {
        let checker = UITextChecker()
        let range = NSRange(location: 0, length: word.utf16.count)
        let misselledRange = checker.rangeOfMisspelledWord(in: word, range: range, startingAt: 0, wrap: false, language: "en")
        return misselledRange.location == NSNotFound
    }
    func wordError(title: String, message: String) {
        errorTitle = title
        errorMessage = message
        showingError = true
    }
}
